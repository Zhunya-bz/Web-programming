{"ast":null,"code":"var _jsxFileName = \"/Users/saltmer/Desktop/crud-ui/src/App.js\";\nimport React, { Component, useState } from 'react';\nimport './App.css';\nimport Table from './Table.js'; // import JsonData from './data.json';\n// import Form from './Form.js';\n// const addForm = (event) => {\n//   // отмена события\n//   event.preventDefault(); // нужно для того чтобы при нажатии на кнопку страница не обновлялась\n//   const fieldName = event.target.getAttribute('name'); \n//   const fieldValue = event.target.value;\n//   const newFormData = {...addFormData}; // копирует с возсожностью расширения\n//   newFormData[fieldName] = fieldValue; //заполняем массив новыми значениями\n//   setAddFormData(newFormData); // обновляем наш  addFormData, изначально был пустым\n// }\n\nfunction App() {\n  const [addFormData, setAddFormData] = useState({\n    id: \"\",\n    Name: \"\",\n    City: \"\"\n  });\n\n  const addForm = event => {\n    // отмена события\n    event.preventDefault();\n    const fieldName = event.target.getAttribute('name');\n    const fieldValue = event.target.value;\n    const newFormData = { ...addFormData\n    }; // копирует с возсожностью расширения\n\n    newFormData[fieldName] = fieldValue; //заполняем массив новыми значениями\n\n    setAddFormData(newFormData); // обновляем наш  addFormData, изначально был пустым\n  };\n\n  const addFormSubmit = event => {\n    event.preventDefault(); // нужно для того чтобы при нажатии на кнопку страница не обновлялась\n  }; // render() {\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 10\n    }\n  }, \"MyApp Table\"), /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, \"Add a contact\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form-inline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"Name\",\n    className: \"form-control\",\n    required: \"required\",\n    placeholder: \"Your name\",\n    onChange: addForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"City\",\n    className: \"form-control\",\n    required: \"required\",\n    placeholder: \"Your city\",\n    onChange: addForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, \"Add\"))); // }\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/saltmer/Desktop/crud-ui/src/App.js"],"names":["React","Component","useState","Table","App","addFormData","setAddFormData","id","Name","City","addForm","event","preventDefault","fieldName","target","getAttribute","fieldValue","value","newFormData","addFormSubmit"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA4BC,QAA5B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,YAAlB,C,CACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;AAEA,SAASC,GAAT,GAAe;AAEb,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAC5C;AACAK,IAAAA,EAAE,EAAE,EADJ;AAEAC,IAAAA,IAAI,EAAE,EAFN;AAGAC,IAAAA,IAAI,EAAE;AAHN,GAD4C,CAA9C;;AAQA,QAAMC,OAAO,GAAIC,KAAD,IAAW;AACzB;AACAA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,SAAS,GAAGF,KAAK,CAACG,MAAN,CAAaC,YAAb,CAA0B,MAA1B,CAAlB;AACA,UAAMC,UAAU,GAAGL,KAAK,CAACG,MAAN,CAAaG,KAAhC;AAEA,UAAMC,WAAW,GAAG,EAAC,GAAGb;AAAJ,KAApB,CANyB,CAMa;;AACtCa,IAAAA,WAAW,CAACL,SAAD,CAAX,GAAyBG,UAAzB,CAPyB,CAOY;;AAErCV,IAAAA,cAAc,CAACY,WAAD,CAAd,CATyB,CASI;AAC9B,GAVD;;AAYA,QAAMC,aAAa,GAAIR,KAAD,IAAW;AAC/BA,IAAAA,KAAK,CAACC,cAAN,GAD+B,CACR;AAExB,GAHD,CAtBa,CA4Bb;;;AACE,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADH,eAEI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHJ,eAII;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,SAAS,EAAC,cAAzC;AAAwD,IAAA,QAAQ,EAAC,UAAjE;AAA4E,IAAA,WAAW,EAAC,WAAxF;AAAoG,IAAA,QAAQ,EAAEF,OAA9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,SAAS,EAAC,cAAzC;AAAwD,IAAA,QAAQ,EAAC,UAAjE;AAA4E,IAAA,WAAW,EAAC,WAAxF;AAAoG,IAAA,QAAQ,EAAEA,OAA9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,iBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAHF,CAJJ,CADF,CA7BW,CAyCb;AACD;;AAED,eAAeN,GAAf","sourcesContent":["import React, { Component , useState} from 'react';\nimport './App.css';\nimport Table from './Table.js';\n// import JsonData from './data.json';\n// import Form from './Form.js';\n\n\n// const addForm = (event) => {\n//   // отмена события\n//   event.preventDefault(); // нужно для того чтобы при нажатии на кнопку страница не обновлялась\n\n//   const fieldName = event.target.getAttribute('name'); \n//   const fieldValue = event.target.value;\n\n//   const newFormData = {...addFormData}; // копирует с возсожностью расширения\n//   newFormData[fieldName] = fieldValue; //заполняем массив новыми значениями\n\n//   setAddFormData(newFormData); // обновляем наш  addFormData, изначально был пустым\n// }\n\nfunction App() {\n\n  const [addFormData, setAddFormData] = useState(\n    {\n    id: \"\",\n    Name: \"\",\n    City: \"\",\n    }\n  )\n\n  const addForm = (event) => {\n    // отмена события\n    event.preventDefault(); \n    const fieldName = event.target.getAttribute('name'); \n    const fieldValue = event.target.value;\n  \n    const newFormData = {...addFormData}; // копирует с возсожностью расширения\n    newFormData[fieldName] = fieldValue; //заполняем массив новыми значениями\n  \n    setAddFormData(newFormData); // обновляем наш  addFormData, изначально был пустым\n  }\n\n  const addFormSubmit = (event) => {\n    event.preventDefault();// нужно для того чтобы при нажатии на кнопку страница не обновлялась\n  \n  }\n\n\n  // render() {\n    return (\n      <div className=\"container\">\n         <h1>MyApp Table</h1> \n          <Table />\n          <h2>Add a contact</h2>\n          <form className='form-inline'>\n            <input type=\"text\" name=\"Name\" className='form-control' required=\"required\" placeholder='Your name' onChange={addForm}/>\n            <input type=\"text\" name=\"City\" className='form-control' required=\"required\" placeholder='Your city' onChange={addForm}/>\n            <button type=\"submit\" className='btn btn-primary'>Add</button>\n\t\t\t     </form>\n      </div>\n    );\n  // }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}