{"ast":null,"code":"var _jsxFileName = \"/Users/saltmer/Desktop/crud-ui/src/App.js\";\nimport React, { Component, useState } from 'react';\nimport './App.css';\nimport JsonDataDisplay from './Table.js';\nimport Table from './Table.js';\nimport JsonData from './data.json'; // import Form from './Form.js';\n// const addForm = (event) => {\n//   // отмена события\n//   event.preventDefault(); // нужно для того чтобы при нажатии на кнопку страница не обновлялась\n//   const fieldName = event.target.getAttribute('name'); \n//   const fieldValue = event.target.value;\n//   const newFormData = {...addFormData}; // копирует с возсожностью расширения\n//   newFormData[fieldName] = fieldValue; //заполняем массив новыми значениями\n//   setAddFormData(newFormData); // обновляем наш  addFormData, изначально был пустым\n// }\n\nfunction App() {\n  const [contacts, setContacts] = useState(JsonData);\n  const [addFormData, setAddFormData] = useState({\n    id: \"\",\n    name: \"\",\n    city: \"\"\n  });\n\n  const addForm = event => {\n    // отмена события\n    event.preventDefault();\n    const fieldName = event.target.getAttribute('name');\n    const fieldValue = event.target.value;\n    const newFormData = { ...addFormData\n    }; // копирует с возсожностью расширения\n\n    newFormData[fieldName] = fieldValue; //заполняем массив новыми значениями\n\n    setAddFormData(newFormData); // обновляем наш  addFormData, изначально был пустым\n  };\n\n  const addFormSubmit = event => {\n    event.preventDefault(); // нужно для того чтобы при нажатии на кнопку страница не обновлялась\n\n    const newRow = {\n      id: 5,\n      Name: addFormData.Name,\n      City: addFormData.City\n    };\n    const newContact = [...contacts, newRow]; // добавляем в массив contacts новую строку\n\n    setContacts(newContact); // обновляем данные\n\n    console.log(newContact);\n    console.log(contacts);\n  }; // render() {\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 10\n    }\n  }, \"MyApp Table\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table table-striped\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, \"ID\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, \"City\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, contacts.map(info => /*#__PURE__*/React.createElement(\"tr\", {\n    key: info.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }, info.id), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }, info.name), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, info.city)))))), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, \"Add a contact\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form-inline\",\n    onSubmit: addFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    className: \"form-control\",\n    required: \"required\",\n    placeholder: \"Your name\",\n    onChange: addForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"city\",\n    className: \"form-control\",\n    required: \"required\",\n    placeholder: \"Your city\",\n    onChange: addForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, \"Add\"))); // }\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/saltmer/Desktop/crud-ui/src/App.js"],"names":["React","Component","useState","JsonDataDisplay","Table","JsonData","App","contacts","setContacts","addFormData","setAddFormData","id","name","city","addForm","event","preventDefault","fieldName","target","getAttribute","fieldValue","value","newFormData","addFormSubmit","newRow","Name","City","newContact","console","log","map","info"],"mappings":"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","sourcesContent":["import React, { Component , useState} from 'react';\nimport './App.css';\nimport JsonDataDisplay from './Table.js';\nimport Table from './Table.js';\nimport JsonData from './data.json';\n// import Form from './Form.js';\n\n\n// const addForm = (event) => {\n//   // отмена события\n//   event.preventDefault(); // нужно для того чтобы при нажатии на кнопку страница не обновлялась\n\n//   const fieldName = event.target.getAttribute('name'); \n//   const fieldValue = event.target.value;\n\n//   const newFormData = {...addFormData}; // копирует с возсожностью расширения\n//   newFormData[fieldName] = fieldValue; //заполняем массив новыми значениями\n\n//   setAddFormData(newFormData); // обновляем наш  addFormData, изначально был пустым\n// }\n\nfunction App() {\n\n  const [contacts, setContacts] = useState(JsonData);\n\n  const [addFormData, setAddFormData] = useState(\n    {\n    id: \"\",\n    name: \"\",\n    city: \"\",\n    }\n  );\n\n  const addForm = (event) => {\n    // отмена события\n    event.preventDefault(); \n    const fieldName = event.target.getAttribute('name'); \n    const fieldValue = event.target.value;\n  \n    const newFormData = {...addFormData}; // копирует с возсожностью расширения\n    newFormData[fieldName] = fieldValue; //заполняем массив новыми значениями\n  \n    setAddFormData(newFormData); // обновляем наш  addFormData, изначально был пустым\n  };\n\n  const addFormSubmit = (event) => {\n    event.preventDefault();// нужно для того чтобы при нажатии на кнопку страница не обновлялась\n  \n    const newRow = {\n      id: 5,\n      Name: addFormData.Name,\n      City: addFormData.City,\n    };\n\n    const newContact = [...contacts, newRow]; // добавляем в массив contacts новую строку\n    setContacts(newContact); // обновляем данные\n    console.log(newContact);\n    console.log(contacts);\n  };\n\n\n  // render() {\n    return (\n      <div className=\"container\">\n         <h1>MyApp Table</h1> \n          {/* <Table /> */}\n          <div>\n            <table className=\"table table-striped\">\n                <thead>\n                    <tr>\n                    <th>ID</th>\n                    <th>Name</th>\n                    <th>City</th>\n                    </tr>\n                </thead>\n                <tbody>\n                 \n                    \n                {contacts.map((info)=>(\n                <tr key={info.id}>\n                    <td>{info.id}</td>\n                    <td>{info.name}</td>\n                    <td>{info.city}</td>\n                </tr>\n                  ))}\n                    \n                </tbody>\n            </table>\n             \n        </div>\n          <h2>Add a contact</h2>\n          <form className='form-inline' onSubmit={addFormSubmit}>\n            <input type=\"text\" name=\"name\" className='form-control' required=\"required\" placeholder='Your name' onChange={addForm}/>\n            <input type=\"text\" name=\"city\" className='form-control' required=\"required\" placeholder='Your city' onChange={addForm}/>\n            <button type=\"submit\" className='btn btn-primary' >Add</button>\n\t\t\t     </form>\n      </div>\n    );\n  // }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}