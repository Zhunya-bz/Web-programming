{"ast":null,"code":"import _classCallCheck from\"/Users/saltmer/Desktop/crud-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/saltmer/Desktop/crud-ui/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/saltmer/Desktop/crud-ui/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/saltmer/Desktop/crud-ui/node_modules/@babel/runtime/helpers/esm/createSuper\";import _objectSpread from\"/Users/saltmer/Desktop/crud-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/saltmer/Desktop/crud-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import logo from\"./logo.svg\";import'./App.css';import Table from'./Table.js';import JsonData from'./data.json';var _useState=useState({id:JsonData.keys(JsonData).length+1,Name:\"\",City:\"\"}),_useState2=_slicedToArray(_useState,2),addFormData=_useState2[0],setAddFormData=_useState2[1];var addForm=function addForm(event){// отмена события\nevent.preventDefault();// нужно для того чтобы при нажатии на кнопку страница не обновлялась\nvar fieldName=event.target.getAttribute('name');var fieldValue=event.target.value;var newFormData=_objectSpread({},addFormData);// копирует с возсожностью расширения\nnewFormData[fieldName]=fieldValue;//заполняем массив новыми значениями\nsetAddFormData(newFormData);// обновляем наш  addFormData, изначально был пустым\n};var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){_classCallCheck(this,App);return _super.apply(this,arguments);}_createClass(App,[{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"container\"},/*#__PURE__*/React.createElement(\"h1\",null,\"MyApp Table\"),/*#__PURE__*/React.createElement(Table,null),/*#__PURE__*/React.createElement(\"h2\",null,\"Add a contact\"),/*#__PURE__*/React.createElement(\"form\",null,/*#__PURE__*/React.createElement(\"input\",{type:\"text\",name:\"name\",required:\"required\",placeholder:\"Your name\",onChange:addForm}),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",name:\"city\",required:\"required\",placeholder:\"Your city\",onChange:addForm}),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\"},\"Add\")));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/saltmer/Desktop/crud-ui/src/App.js"],"names":["React","useState","Table","JsonData","id","keys","length","Name","City","addFormData","setAddFormData","addForm","event","preventDefault","fieldName","target","getAttribute","fieldValue","value","newFormData","App","Component"],"mappings":"qpBAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,C,6BAEA,MAAO,WAAP,CACA,MAAOC,CAAAA,KAAP,KAAkB,YAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,aAArB,CAEA,cAAsCF,QAAQ,CAC5C,CACEG,EAAE,CAAED,QAAQ,CAACE,IAAT,CAAcF,QAAd,EAAwBG,MAAxB,CAAiC,CADvC,CAEEC,IAAI,CAAE,EAFR,CAGEC,IAAI,CAAE,EAHR,CAD4C,CAA9C,wCAAOC,WAAP,eAAoBC,cAApB,eAOA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAW,CACzB;AACAA,KAAK,CAACC,cAAN,GAAwB;AAExB,GAAMC,CAAAA,SAAS,CAAGF,KAAK,CAACG,MAAN,CAAaC,YAAb,CAA0B,MAA1B,CAAlB,CACA,GAAMC,CAAAA,UAAU,CAAGL,KAAK,CAACG,MAAN,CAAaG,KAAhC,CAEA,GAAMC,CAAAA,WAAW,kBAAOV,WAAP,CAAjB,CAAsC;AACtCU,WAAW,CAACL,SAAD,CAAX,CAAyBG,UAAzB,CAAqC;AAErCP,cAAc,CAACS,WAAD,CAAd,CAA6B;AAC9B,CAXD,C,GAaMC,CAAAA,G,8MAIJ,iBAAS,CACP,mBACE,2BAAK,SAAS,CAAC,WAAf,eACG,4CADH,cAEI,oBAAC,KAAD,MAFJ,cAGI,8CAHJ,cAII,6CACE,6BAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,MAAxB,CAA+B,QAAQ,CAAC,UAAxC,CAAmD,WAAW,CAAC,WAA/D,CAA2E,QAAQ,CAAET,OAArF,EADF,cAEE,6BAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,MAAxB,CAA8B,QAAQ,CAAC,UAAvC,CAAkD,WAAW,CAAC,WAA9D,CAAyE,QAAQ,CAAEA,OAAnF,EAFF,cAGE,8BAAQ,IAAI,CAAC,QAAb,QAHF,CAJJ,CADF,CAYD,C,iBAjBeU,S,EAoBlB,cAAeD,CAAAA,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Table from './Table.js';\nimport JsonData from './data.json';\n\nconst [addFormData, setAddFormData] = useState(\n  {\n    id: JsonData.keys(JsonData).length + 1,\n    Name: \"\",\n    City: \"\",\n  }\n)\nconst addForm = (event) => {\n  // отмена события\n  event.preventDefault(); // нужно для того чтобы при нажатии на кнопку страница не обновлялась\n\n  const fieldName = event.target.getAttribute('name'); \n  const fieldValue = event.target.value;\n\n  const newFormData = {...addFormData}; // копирует с возсожностью расширения\n  newFormData[fieldName] = fieldValue; //заполняем массив новыми значениями\n\n  setAddFormData(newFormData); // обновляем наш  addFormData, изначально был пустым\n}\n\nclass App extends Component {\n\n\n\n  render() {\n    return (\n      <div className=\"container\">\n         <h1>MyApp Table</h1> \n          <Table />\n          <h2>Add a contact</h2>\n          <form>\n            <input type=\"text\" name=\"name\" required=\"required\" placeholder='Your name' onChange={addForm}/>\n            <input type=\"text\" name=\"city\"required=\"required\" placeholder='Your city'onChange={addForm}/>\n            <button type=\"submit\">Add</button>\n          </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}