{"ast":null,"code":"var _jsxFileName = \"/Users/saltmer/Desktop/crud-ui/src/App.js\";\nimport React, { useEffect, useState, Fragment } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { deleteDataServ, putDataServ, getDataServ } from './components/ServerFunc.js';\nimport TableRow from './components/TableRow.js';\nimport Form from './components/Form.js';\nimport EditRow from './components/EditRow.js';\naxios.defaults.baseURL = 'http://178.128.196.163:3000/api/records/';\n\nfunction App() {\n  const [contacts, setContacts] = useState([]); // данные которые вводятся при добавлении поля\n\n  const [addFormData, setAddFormData] = useState({\n    name: \"\",\n    age: \"\",\n    email: \"\"\n  }); //  для изменения и взятия данных из текущих полей таблицы\n\n  const [editFormData, setEditFormData] = useState({\n    name: \"\",\n    age: \"\",\n    email: \"\"\n  }); //переменная чтобы определить какой id используется в данном\n  // случае, если null - то никакой. Нужен для редактирования строки\n\n  const [editContId, setEditContId] = useState(null);\n  useEffect(() => {\n    // вызывается один раз\n    getDataServ().then(result => setContacts(result));\n  }, []);\n\n  const addForm = event => {\n    event.preventDefault(); // отмена события\n\n    const fieldName = event.target.getAttribute('name'); // что лежит в инпуте под name - это name and age and email\n\n    const fieldValue = event.target.value;\n    const newFormData = { ...addFormData\n    }; // копирует с возсожностью расширения\n\n    newFormData[fieldName] = fieldValue; //заполняем массив новыми значениями\n\n    setAddFormData(newFormData); // обновляем наш  addFormData, изначально был пустым\n  };\n\n  const editFormChange = event => {\n    event.preventDefault(); // отмена события\n\n    const fieldName = event.target.getAttribute('name'); // что лежит в инпуте под name - это name and age and email\n\n    const fieldValue = event.target.value;\n    const newFormData = { ...editFormData\n    }; // копирует с возсожностью расширения\n\n    newFormData[fieldName] = fieldValue; //заполняем массив новыми значениями\n\n    setEditFormData(newFormData); // обновляем наш  editFormData, изначально был пустым\n  };\n\n  const addFormSubmit = event => {\n    event.preventDefault(); // нужно для того чтобы при нажатии на кнопку страница не обновлялась\n\n    const newRow = {\n      data: {\n        name: addFormData.name,\n        age: addFormData.age,\n        email: addFormData.email\n      }\n    };\n    let res = putDataServ(newRow); // посылаем на сервер наше новое значение\n\n    res.then(result => {\n      const newCont = [...contacts, result];\n      setContacts(newCont);\n    });\n  };\n\n  const deleteFunc = contactId => {\n    let del = deleteDataServ(contactId);\n    let newArr = contacts.filter(function (value) {\n      if (value._id !== contactId) return value;\n    });\n    setContacts(newArr);\n  };\n\n  const editClick = (event, contacts) => {\n    event.preventDefault();\n    setEditContId(contacts._id);\n    const formValues = {\n      data: {\n        name: editFormData.name,\n        age: editFormData.age,\n        email: editFormData.email\n      }\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 10\n    }\n  }, \"MyApp Table\"), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table table-striped\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, \"Age\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, \"Email\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, contacts.map(info => /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  }, editContId === info._id ? /*#__PURE__*/React.createElement(EditRow, {\n    deleteFunc: deleteFunc,\n    info: info,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 20\n    }\n  }) : /*#__PURE__*/React.createElement(TableRow, {\n    info: info,\n    deleteFunc: deleteFunc,\n    editClick: editClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 71\n    }\n  })))))), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, \"Add a contact\"), /*#__PURE__*/React.createElement(Form, {\n    addForm: addForm,\n    addFormSubmit: addFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/saltmer/Desktop/crud-ui/src/App.js"],"names":["React","useEffect","useState","Fragment","axios","deleteDataServ","putDataServ","getDataServ","TableRow","Form","EditRow","defaults","baseURL","App","contacts","setContacts","addFormData","setAddFormData","name","age","email","editFormData","setEditFormData","editContId","setEditContId","then","result","addForm","event","preventDefault","fieldName","target","getAttribute","fieldValue","value","newFormData","editFormChange","addFormSubmit","newRow","data","res","newCont","deleteFunc","contactId","del","newArr","filter","_id","editClick","formValues","map","info"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport {deleteDataServ, putDataServ, getDataServ} from './components/ServerFunc.js';\nimport TableRow from './components/TableRow.js';\nimport Form from './components/Form.js';\nimport EditRow from './components/EditRow.js';\n\naxios.defaults.baseURL = 'http://178.128.196.163:3000/api/records/';\n\nfunction App()\n{\n  const [contacts, setContacts] = useState([]);\n\n  // данные которые вводятся при добавлении поля\n  const [addFormData, setAddFormData] = useState(\n    {\n      name: \"\",\n      age: \"\",\n      email: \"\",\n    }\n  );\n    //  для изменения и взятия данных из текущих полей таблицы\n  const [editFormData, setEditFormData] = useState(\n    {\n      name: \"\",\n      age: \"\",\n      email: \"\",\n    }\n  );\n\n  //переменная чтобы определить какой id используется в данном\n  // случае, если null - то никакой. Нужен для редактирования строки\n  const [editContId, setEditContId] = useState(null); \n\n\n  useEffect(()=> { // вызывается один раз\n    getDataServ().then(result => setContacts(result));\n  }, []);\n\n\n  const addForm = (event) => \n  {\n    event.preventDefault();  // отмена события\n    const fieldName = event.target.getAttribute('name'); // что лежит в инпуте под name - это name and age and email\n    const fieldValue = event.target.value; \n  \n    const newFormData = {...addFormData}; // копирует с возсожностью расширения\n    newFormData[fieldName] = fieldValue; //заполняем массив новыми значениями\n  \n    setAddFormData(newFormData); // обновляем наш  addFormData, изначально был пустым\n  };\n\n  const editFormChange = (event) => \n  {\n    event.preventDefault();  // отмена события\n    const fieldName = event.target.getAttribute('name'); // что лежит в инпуте под name - это name and age and email\n    const fieldValue = event.target.value; \n  \n    const newFormData = {...editFormData}; // копирует с возсожностью расширения\n    newFormData[fieldName] = fieldValue; //заполняем массив новыми значениями\n  \n    setEditFormData(newFormData); // обновляем наш  editFormData, изначально был пустым\n  };\n\n  const addFormSubmit = (event) => \n  {\n    event.preventDefault();// нужно для того чтобы при нажатии на кнопку страница не обновлялась\n\n    const newRow = \n    {\n      data :\n      {\n        name: addFormData.name,\n        age: addFormData.age,\n        email: addFormData.email,\n      },\n    };\n\n    let res = putDataServ(newRow); // посылаем на сервер наше новое значение\n    res.then(result => \n      {\n        const newCont = [...contacts, result];\n        setContacts(newCont);\n      });\n  };\n\n  const deleteFunc = (contactId) => \n  {\n   let del = deleteDataServ(contactId);\n\n    let newArr = contacts.filter(function(value) {\n      if (value._id !== contactId)\n        return value;\n    });\n    setContacts(newArr);\n  };\n\n  const editClick = (event, contacts) =>\n  {\n    event.preventDefault();\n    setEditContId(contacts._id);\n\n    const formValues = {\n      data :\n      {\n        name: editFormData.name,\n        age: editFormData.age,\n        email: editFormData.email,\n      },\n    };\n  }\n\n    return (\n      <div className=\"container\">\n         <h1>MyApp Table</h1> \n         <form>\n         <table className=\"table table-striped\">\n          <thead>\n            <tr>\n            <th>Name</th>\n            <th>Age</th>\n            <th>Email</th>\n            </tr>\n          </thead>\n          <tbody>\n            {contacts.map((info)=>(\n              <Fragment>\n                {editContId === info._id ?\n                  (<EditRow deleteFunc={deleteFunc} info={info}/>) : (<TableRow info={info} deleteFunc={deleteFunc} editClick={editClick}/>)\n                }\n              </Fragment>\n                ))}\n          </tbody>\n        </table>\n        </form>\n\n            {/* <Table contacts={contacts} deleteFunc={deleteFunc}/> */}\n          <h2>Add a contact</h2>\n          <Form addForm={addForm} addFormSubmit={addFormSubmit}/>\n      </div>\n    );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}