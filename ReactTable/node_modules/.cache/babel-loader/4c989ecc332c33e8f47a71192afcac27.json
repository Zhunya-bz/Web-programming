{"ast":null,"code":"var _jsxFileName = \"/Users/saltmer/Desktop/crud-ui/src/App.js\";\nimport React, { useEffect, useState, Fragment } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { deleteDataServ, putDataServ, getDataServ } from './components/ServerFunc.js';\nimport TableRow from './components/TableRow.js';\nimport Form from './components/Form.js';\nimport EditRow from './components/EditRow.js';\naxios.defaults.baseURL = 'http://178.128.196.163:3000/api/records/';\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const [addFormData, setAddFormData] = useState({\n    name: \"\",\n    age: \"\",\n    email: \"\"\n  }); //переменная чтобы определить какой id используется в данном\n  // случае, если null - то никакой. Нужен для редактирования строки\n\n  const [contId, setContId] = useState(null);\n  useEffect(() => {\n    // вызывается один раз\n    getDataServ().then(result => setContacts(result));\n  }, []);\n\n  const addForm = event => {\n    event.preventDefault(); // отмена события\n\n    const fieldName = event.target.getAttribute('name'); // что лежит в инпуте под name - это name and age and email\n\n    const fieldValue = event.target.value;\n    const newFormData = { ...addFormData\n    }; // копирует с возсожностью расширения\n\n    newFormData[fieldName] = fieldValue; //заполняем массив новыми значениями\n\n    setAddFormData(newFormData); // обновляем наш  addFormData, изначально был пустым\n  };\n\n  const addFormSubmit = event => {\n    event.preventDefault(); // нужно для того чтобы при нажатии на кнопку страница не обновлялась\n\n    const newRow = {\n      data: {\n        name: addFormData.name,\n        age: addFormData.age,\n        email: addFormData.email\n      }\n    };\n    let res = putDataServ(newRow); // посылаем на сервер наше новое значение\n\n    res.then(result => {\n      const newCont = [...contacts, result];\n      setContacts(newCont);\n    });\n  };\n\n  const deleteFunc = contactId => {\n    let del = deleteDataServ(contactId);\n    let newArr = contacts.filter(function (value) {\n      if (value._id !== contactId) return value;\n    });\n    setContacts(newArr);\n  };\n\n  const EditClick = (event, contacts) => {\n    event.preventDefault();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 10\n    }\n  }, \"MyApp Table\"), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table table-striped\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, \"Age\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, \"Email\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, contacts.map(info => /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(EditRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(TableRow, {\n    deleteFunc: deleteFunc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  })))))), /*#__PURE__*/React.createElement(Table, {\n    contacts: contacts,\n    deleteFunc: deleteFunc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"Add a contact\"), /*#__PURE__*/React.createElement(Form, {\n    addForm: addForm,\n    addFormSubmit: addFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/saltmer/Desktop/crud-ui/src/App.js"],"names":["React","useEffect","useState","Fragment","axios","deleteDataServ","putDataServ","getDataServ","TableRow","Form","EditRow","defaults","baseURL","App","contacts","setContacts","addFormData","setAddFormData","name","age","email","contId","setContId","then","result","addForm","event","preventDefault","fieldName","target","getAttribute","fieldValue","value","newFormData","addFormSubmit","newRow","data","res","newCont","deleteFunc","contactId","del","newArr","filter","_id","EditClick","map","info"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport {deleteDataServ, putDataServ, getDataServ} from './components/ServerFunc.js';\nimport TableRow from './components/TableRow.js';\nimport Form from './components/Form.js';\nimport EditRow from './components/EditRow.js';\n\naxios.defaults.baseURL = 'http://178.128.196.163:3000/api/records/';\n\nfunction App()\n{\n  const [contacts, setContacts] = useState([]);\n\n  const [addFormData, setAddFormData] = useState(\n    {\n      name: \"\",\n      age: \"\",\n      email: \"\",\n    }\n  );\n\n  //переменная чтобы определить какой id используется в данном\n  // случае, если null - то никакой. Нужен для редактирования строки\n  const [contId, setContId] = useState(null); \n\n  useEffect(()=> { // вызывается один раз\n    getDataServ().then(result => setContacts(result));\n  }, []);\n\n\n  const addForm = (event) => \n  {\n    event.preventDefault();  // отмена события\n    const fieldName = event.target.getAttribute('name'); // что лежит в инпуте под name - это name and age and email\n    const fieldValue = event.target.value; \n  \n    const newFormData = {...addFormData}; // копирует с возсожностью расширения\n    newFormData[fieldName] = fieldValue; //заполняем массив новыми значениями\n  \n    setAddFormData(newFormData); // обновляем наш  addFormData, изначально был пустым\n  };\n\n  const addFormSubmit = (event) => \n  {\n    event.preventDefault();// нужно для того чтобы при нажатии на кнопку страница не обновлялась\n\n    const newRow = \n    {\n      data :\n      {\n        name: addFormData.name,\n        age: addFormData.age,\n        email: addFormData.email,\n      },\n    };\n\n    let res = putDataServ(newRow); // посылаем на сервер наше новое значение\n    res.then(result => \n      {\n        const newCont = [...contacts, result];\n        setContacts(newCont);\n      });\n  };\n\n  const deleteFunc = (contactId) => \n  {\n   let del = deleteDataServ(contactId);\n\n    let newArr = contacts.filter(function(value) {\n      if (value._id !== contactId)\n        return value;\n    });\n    setContacts(newArr);\n  };\n\n  const EditClick = (event, contacts) =>\n  {\n    event.preventDefault();\n    \n  }\n\n    return (\n      <div className=\"container\">\n         <h1>MyApp Table</h1> \n         <form>\n         <table className=\"table table-striped\">\n          <thead>\n            <tr>\n            <th>Name</th>\n            <th>Age</th>\n            <th>Email</th>\n            </tr>\n          </thead>\n          <tbody>\n            {contacts.map((info)=>(\n              <Fragment>\n                  <EditRow />\n                <TableRow deleteFunc={deleteFunc}/>\n              </Fragment>\n                ))}\n          </tbody>\n        </table>\n        </form>\n\n            <Table contacts={contacts} deleteFunc={deleteFunc}/>\n          <h2>Add a contact</h2>\n          <Form addForm={addForm} addFormSubmit={addFormSubmit}/>\n      </div>\n    );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}