{"version":3,"sources":["App.js","index.js","registerServiceWorker.js"],"names":["App","useState","contacts","setContacts","name","age","email","addFormData","setAddFormData","console","log","JsonData","length","addForm","event","preventDefault","fieldName","target","getAttribute","fieldValue","value","newFormData","className","map","info","key","_id","data","onClick","contactId","newContacts","index","findIndex","item","splice","deleteFunc","onSubmit","newRow","nanoid","__v","newContact","type","required","placeholder","onChange","ReactDOM","render","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error"],"mappings":"urBAqKeA,MA3Jf,WAEE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAGA,EAAsCF,mBACpC,CACEG,KAAM,GACNC,IAAK,GACLC,MAAO,KAJX,mBAAOC,EAAP,KAAoBC,EAApB,KAyBFC,QAAQC,IAAIC,EAASC,QAyBnB,IAAMC,EAAU,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAYF,EAAMG,OAAOC,aAAa,QACtCC,EAAaL,EAAMG,OAAOG,MAE1BC,EAAW,eAAOd,GACxBc,EAAYL,GAAaG,EAGzBX,EAAea,IAgDf,OACE,yBAAKC,UAAU,aACZ,2CACC,6BACE,2BAAOA,UAAU,uBACb,+BACI,4BACA,oCACA,mCACA,uCAGH,+BACIpB,EAASqB,KAAI,SAACC,GAAD,OACd,wBAAIC,IAAKD,EAAKE,KACV,4BAAKF,EAAKG,KAAKvB,MACf,4BAAKoB,EAAKG,KAAKtB,KACf,4BAAKmB,EAAKG,KAAKrB,OAEf,4BAAI,4BAAQgB,UAAU,kBAAkBM,QAAS,kBA9BpD,SAACC,GAClB,IAAMC,EAAW,YAAO5B,GAElB6B,EAAQD,EAAYE,WAAU,SAAAC,GAAI,OAAIA,EAAKP,MAAQG,KAEzDC,EAAYI,OAAOH,EAAO,GAC1B5B,EAAY2B,GAwB6DK,CAAWX,EAAKE,OAAjE,kBASlB,6CACA,0BAAMJ,UAAU,cAAcc,SA1EhB,SAACtB,GACrBA,EAAMC,iBAgBN,IAAMsB,EAAS,CACbX,IAAKY,cACLX,KACA,CACEvB,KAAMG,EAAYH,KAClBC,IAAKE,EAAYF,IACjBC,MAAOC,EAAYD,OAErBiC,IAAK,GAGDC,EAAU,sBAAOtC,GAAP,CAAiBmC,IACjClC,EAAYqC,KA8CN,yBAAKlB,UAAU,cACb,2BAAOmB,KAAK,OAAOrC,KAAK,OAAOkB,UAAU,iCAAiCoB,SAAS,WAAWC,YAAY,YAAYC,SAAU/B,IAChI,2BAAO4B,KAAK,OAAOrC,KAAK,MAAMkB,UAAU,iCAAiCoB,SAAS,WAAWC,YAAY,WAAWC,SAAU/B,IAC9H,2BAAO4B,KAAK,OAAOrC,KAAK,QAAQkB,UAAU,iCAAiCoB,SAAS,WAAWC,YAAY,aAAaC,SAAU/B,IAClI,4BAAQ4B,KAAK,SAASnB,UAAU,mBAAhC,W,YCrJZuB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SCIF,kBAAmBC,WAC9DC,OAAOC,iBAAiB,QAAQ,WAC9B,IAAMC,EAAK,UAAMC,GAAN,sBACXJ,UAAUK,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfb,UAAUK,cAAcS,WAK1BtD,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBsD,OAAM,SAAAC,GACLxD,QAAQwD,MAAM,4CAA6CA,W","file":"static/js/main.29dd5a2d.chunk.js","sourcesContent":["import React, { Component , useEffect, useState} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { nanoid } from 'nanoid';\n// import JsonDataDisplay from './Table.js';\n// import Table from './Table.js';\nimport JsonData from './data.json'; // https://api.jsonserve.com/1ekkzf\n// import PersonList from './PersonList.js';\n// import Form from './Form.js';\n\nfunction App() {\n\n  const [contacts, setContacts] = useState([]);\n\n\n  const [addFormData, setAddFormData] = useState(\n    {\n      name: \"\",\n      age: \"\",\n      email: \"\",\n    }\n  );\n\n  // useEffect(()=>{\n  //   axios.get(`http://178.128.196.163:3000/api/records`)\n  //     .then(res => {setContacts(res.data); console.log(res.data)})\n  //       .catch(err=>{console.log(err)})\n  //       // console.log('in hook');\n  //       // console.log(\"useef:  \", contacts);\n  //     }, []);\n  // console.log(\"contact:  \", contacts);\n\n  const data = {\n    name: \"zhenya\",\n    age: 10,\n    email: \"ee@mail.ru\",\n};\n\n  // console.log(\"JSON: \", JsonData[0]);\n  // console.log(\"data: \", data);\nconsole.log(JsonData.length);\n\n\n  // useEffect(()=> {\n  //   var i = 0;\n  //   while (i < JsonData.length)\n  //   {\n  //       axios.put(`http://178.128.196.163:3000/api/records`,  JsonData[i] )\n  //       .then(res => {\n  //         console.log(res);\n  //         console.log(res.data);\n  //       });\n  //       i++;\n  //   }\n  // });\n\n\n  // if (contacts && !contacts.hasOwnProperty('data')) // todo\n  // {\n  //   return (\n  //     <h1>Error</h1>\n  //   )\n  // }\n  // console.log(contacts);\n\n  const addForm = (event) => {\n    event.preventDefault();  // отмена события\n    const fieldName = event.target.getAttribute('name'); // что лежит в инпуте под name - это name and age and email\n    const fieldValue = event.target.value; \n  \n    const newFormData = {...addFormData}; // копирует с возсожностью расширения\n    newFormData[fieldName] = fieldValue; //заполняем массив новыми значениями\n    // console.log(newFormData);\n  \n    setAddFormData(newFormData); // обновляем наш  addFormData, изначально был пустым\n  };\n\n  const addFormSubmit = (event) => {\n    event.preventDefault();// нужно для того чтобы при нажатии на кнопку страница не обновлялась\n  \n    // console.log(Object.keys(JsonData).length);\n    // const getMaxIndex = () => {\n    //   var max = contacts[0].id;\n    //   for (var i = 0; i < contacts.length; i++)\n    //   {\n    //     if (contacts[i].id > max)\n    //       max = contacts[i].id;\n    //   }\n    //   return max;\n    // }\n    // var max = getMaxIndex();\n  // console.log(max);\n\n\n    const newRow = {\n      _id: nanoid(),\n      data :\n      {\n        name: addFormData.name,\n        age: addFormData.age,\n        email: addFormData.email,\n      },\n      __v: 0,\n    };\n\n    const newContact = [...contacts, newRow]; // добавляем в массив contacts новую строку\n    setContacts(newContact); // обновляем данные\n    // console.log(newContact);\n    // console.log(contacts);\n  };\n\n  const deleteFunc = (contactId) => {\n    const newContacts = [...contacts];\n\n    const index = newContacts.findIndex(item => item._id === contactId);\n\n    newContacts.splice(index, 1); // удалить в newContacts начинаю с номера index один элемент\n    setContacts(newContacts);\n  };\n\n\n  // render() {\n    return (\n      <div className=\"container\">\n         <h1>MyApp Table</h1> \n          <div>\n            <table className=\"table table-striped\">\n                <thead>\n                    <tr>\n                    <th>Name</th>\n                    <th>Age</th>\n                    <th>Email</th>\n                    </tr>\n                </thead>\n                 <tbody>\n                    {contacts.map((info)=>(\n                    <tr key={info._id}>\n                        <td>{info.data.name}</td>\n                        <td>{info.data.age}</td>\n                        <td>{info.data.email}</td>\n                        {/* <PersonList/> */}\n                        <td><button className='btn btn-primary' onClick={()=>deleteFunc(info._id)}>Delete</button></td>\n                    </tr>\n                \n                      ))}\n                </tbody>\n                    \n            </table>\n             \n          </div>\n          <h2>Add a contact</h2>\n          <form className=\"form-inline\" onSubmit={addFormSubmit}>\n          <div className=\"form-group\">\n            <input type=\"text\" name=\"name\" className='form-control form-inline_input' required=\"required\" placeholder='Your name' onChange={addForm}/>\n            <input type=\"text\" name=\"age\" className='form-control form-inline_input' required=\"required\" placeholder='Your age' onChange={addForm}/>\n            <input type=\"text\" name=\"email\" className='form-control form-inline_input' required=\"required\" placeholder='Your email' onChange={addForm}/>\n            <button type=\"submit\" className='btn btn-primary' >Add</button>\n            </div>\n\t\t\t     </form>\n          {/* <PersonList/> */}\n      </div>\n    );\n  // }\n}\n\nexport default App;\n\n// import React from 'react';\n// import PersonList from './PersonList.js';\n// import PersonRemove from './PersonRemove';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <PersonList/>\n//       <PersonRemove/>\n//     </div>\n//   )\n// }\n// export default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}